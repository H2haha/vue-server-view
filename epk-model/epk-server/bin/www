#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


//heart.js
// 加入心跳机制的长连接
const WebSocketServer = require('ws').Server;
const wss = new WebSocketServer({ port: 8082 });

function noop() { 
    console.log('noop');
}
function heartbeat() {
    this.isAlive = true;
}

wss.on('connection', function connection(ws) {
    console.log('会话已建立');
    const timer = setInterval(() => {
        const info = 'I`m server info';
        console.log(info);
        ws.send(info);
    }, 3000);

    ws.isAlive = true;
    ws.on('pong', heartbeat);
    const interval = setInterval(function ping() {
        wss.clients.forEach(function each(ws) {
            if (ws.isAlive === false) {
                return ws.terminate();
            }
            ws.isAlive = false;
            ws.ping(noop);
        });
    }, 3000);

    ws.on('message', function incoming(message) {
        console.log('received: %s', message);
    });

    ws.on('error', function () {
        console.log('error');
    });
    ws.on('close', function (reson) {
        clearInterval(timer);
        console.log('close', reson);
    });
});
